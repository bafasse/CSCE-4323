///////////////////////////////////////////////////////////////////////////////
//	CSCE 4323
//	Fall 2018
//	Homework 3
//	Blake Fasse
//  The following code is for use with the automata simulators found here:
//    http://web.cs.ucdavis.edu/~doty/automata/
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// 1.6i
// Regex recognizing {w | every odd position of w is a 1}
// 
// Summary: Regex with every odd position of w being a 1
//

(101)*
(|1)
	
	
	
///////////////////////////////////////////////////////////////////////////////
// 1.6j
// Regex recognizing {w | w contains at least two 0s and at most one 1}
// 
// Summary: Regex with w containing at least two 0's and at mosty one 1
//

(00+) | (100+) | (0+10+) | (00+1)



///////////////////////////////////////////////////////////////////////////////
// 1.19a
// NFA for Regex recognizing (0 ∪ 1) ∗ 000(0 ∪ 1) ∗
// 
// Summary: NFA for the regex (0 ∪ 1) ∗ 000(0 ∪ 1) ∗
//

states =          {q0,q1,q2,q3,q4,q5,q6,q7,q8,q9,q10,q11,q12,q13,q14,q15,q16,q17}
input_alphabet =  {0,1}
start_state =     q0
accept_states =   {q12,q15,q17}
delta =
    q0,   -> {q1,q6};    
    q1,   -> {q2,q4};
    q2,0  -> q3;
    q3,   -> {q1,q6};
    q4,1  -> q5;
    q5,   -> {q1,q6};
    q6,0  -> q7;
    q7,   -> q8;
    q8,0  -> q9;
    q9,   -> q10;
    q10,0 -> q11;
    q11,  -> q12;
    q12,  -> q13;
    q13,  -> {q14,q16};
    q14,0 -> q15;
    q15,  -> q13;
    q16,1 -> q17;
    q17,  -> q13;



///////////////////////////////////////////////////////////////////////////////
// 1.19b
// NFA for Regex recognizing (((00) ∗ (11)) ∪ 01) ∗
// 
// Summary: NFA for regex (((00) ∗ (11)) ∪ 01) ∗
//

states =          {q0,q1,q2,q3,q4,q5,q6,q7,q8,q9,q10,q11,q12,q13,q14}
input_alphabet =  {0,1}
start_state =     q0
accept_states =   {q0,q10,q14}
delta =
    q0,   -> q1;
    q1,   -> {q2,q7};
    q2,   -> {q3,q11};
    q3,0  -> q4;
    q4,   -> q5;
    q5,0  -> q6;
    q6,   -> {q3,q11};
    q7,0  -> q8;
    q8,   -> q9;
    q9,1  -> q10;
    q10,  -> q1;
    q11,1 -> q12;
    q12,  -> q13;
    q13,1 -> q14;
    q14,  -> q1;

	
	
///////////////////////////////////////////////////////////////////////////////
// 1.21a
// Use Lemma 1.60 to convert the following finite automata into regular expressiona
// 
// Summary: NFA converted into a regex 
//

a*b
(a|ba*b)*



///////////////////////////////////////////////////////////////////////////////
// 1.21b
// Use Lemma 1.60 to convert the following finite automata into regular expressiona
// 
// Summary: NFA converted into a regex
//

|(a|b)
a*b
((a(a|b)|b)a*b)*
(|a)