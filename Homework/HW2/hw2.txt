///////////////////////////////////////////////////////////////////////////////
//	CSCE 4323
//	Fall 2018
//	Homework 2
//	Blake Fasse
//  The following code is for use with the automata simulators found here:
//    http://web.cs.ucdavis.edu/~doty/automata/
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// 1.7b
// NFA recognizing { w | w contains the substring 0101 i.e, w = x0101y for some x and y}
// 
// Summary: <high-level-summary-of-solution> 
//

states =          {q0,q1,q2,q3,q4}
input_alphabet =  {0,1}
start_state =     q0
accept_states =   {q4}
delta =
    q0,0 -> {q0,q1};
    q0,1 -> q1;
    
    q1,1 -> q2;
    
    q2,0 -> q3;
    
    q3,1 -> q4;
    
    q4,0 -> q4;
    q4,1 -> q4;

	
	
	
///////////////////////////////////////////////////////////////////////////////
// 1.7c
// NFA recognizing { w | w contains an even number of 0's and exactly two 1's }
// 
// Summary: <high-level-summary-of-solution> 
//

states =          {q0,q1,q2,q3,q4,q5}
input_alphabet =  {0,1}
start_state =     q0
accept_states =   {q1,q5}
delta =
    // { w | w contains exactly two 1's }
    q0,0 -> q3;
    
    q3,0 -> q3;
    q3,1 -> q4;
    
    q4,0 -> q4;
    q4,1 -> q5;
    
    q5,0 -> q5;
    
    // { w | w contains an even number of 0's }
    q0,1 -> q1;
    
    q1,0 -> q2;
    q1,1 -> q1;
    
    q2,0 -> q1;
    q2,1 -> q2;
    




///////////////////////////////////////////////////////////////////////////////
// 1.7d
// NFA recognizing { w | w contains only 0 }
// 
// Summary: <high-level-summary-of-solution> 
//

states =          {q0,q1}
input_alphabet =  {0,1}
start_state =     q0
accept_states =   {q1}
delta =
    q0,0 -> q1;
    

///////////////////////////////////////////////////////////////////////////////
// 1.7e
// NFA recognizing { w | w contains 0*1*0*}
// 
// Summary: <high-level-summary-of-solution> 
//

<DFA-definition>
	
	
	
///////////////////////////////////////////////////////////////////////////////
// 1.13
// NFA recognizing { w | w doesnt contain a pair of 1's that are seperated by an odd number fo symbols }
// 
// Summary: <high-level-summary-of-solution> 
//

states =          {q0,q1,q2,q3,q4}
input_alphabet =  {0,1}
start_state =     q0
accept_states =   {q0,q1,q2,q3}
delta =
    q0,0 -> q0;
    q0,1 -> q1;
    
    q1,0 -> q3;
    q1,1 -> q2;
    
    q2,0 -> q2;
    q2,1 -> q4;
    
    q3,0 -> q1;
    q3,1 -> q4;
    
    q4,0 -> q4;
    q4,1 -> q4;




///////////////////////////////////////////////////////////////////////////////
// <problem-number>
// <problem-description>
// 
// Summary: <high-level-summary-of-solution> 
//

<DFA-definition>