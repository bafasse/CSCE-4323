///////////////////////////////////////////////////////////////////////////////
//	CSCE 4323
//	Fall 2018
//	Homework 2
//	Blake Fasse
//  The following code is for use with the automata simulators found here:
//    http://web.cs.ucdavis.edu/~doty/automata/
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// 1.7b
// NFA recognizing { w | w contains the substring 0101 i.e, w = x0101y for some x and y}
// 
// Summary: Contains 5 states, q0,q1, ... ,q4, with q4 being an accept state. 
//          Accept when w contains the substring 0101 
//

states =          {q0,q1,q2,q3,q4}
input_alphabet =  {0,1}
start_state =     q0
accept_states =   {q4}
delta =
    q0,0 -> {q0,q1};
    q0,1 -> q1;
    
    q1,1 -> q2;
    
    q2,0 -> q3;
    
    q3,1 -> q4;
    
    q4,0 -> q4;
    q4,1 -> q4;

	
	
	
///////////////////////////////////////////////////////////////////////////////
// 1.7c
// NFA recognizing { w | w contains an even number of 0's and exactly two 1's }
// 
// Summary: Contains 6 states, q0,q1, ... ,q5, with q1 and q5 being accept states.
//          Accepts when w contains any even number of 0's and exactly two 1's 
//

states =          {q0,q1,q2,q3,q4,q5}
input_alphabet =  {0,1}
start_state =     q0
accept_states =   {q1,q5}
delta =
    // { w | w contains exactly two 1's }
    q0,0 -> q3;
    
    q3,0 -> q3;
    q3,1 -> q4;
    
    q4,0 -> q4;
    q4,1 -> q5;
    
    q5,0 -> q5;
    
    // { w | w contains an even number of 0's }
    q0,1 -> q1;
    
    q1,0 -> q2;
    q1,1 -> q1;
    
    q2,0 -> q1;
    q2,1 -> q2;
    




///////////////////////////////////////////////////////////////////////////////
// 1.7d
// NFA recognizing { w | w contains only 0 }
// 
// Summary: Contains 2 states, q0,q1, with q1 being an accept state. Accepts when
//          w contains only 0, nothin more.
//

states =          {q0,q1}
input_alphabet =  {0,1}
start_state =     q0
accept_states =   {q1}
delta =
    q0,0 -> q1;
    

///////////////////////////////////////////////////////////////////////////////
// 1.7e
// NFA recognizing { w | w contains 0*1*0*}
// 
// Summary: Contains 3 states, q0,q1,q2, with q0 and q2 as accept states. Accepts
//          when w contains 0*1*0* 
//

states =          {q0,q1,q2}
input_alphabet =  {0,1}
start_state =     q0
accept_states =   {q0,q2}
delta =
    q0,0 -> {q0,q1};
    q0,1 -> {q0,q1};
    
    q1,0 -> {q1,q2};
    q1,1 -> {q1,q2};
    
    q2,0 -> q2;
    q2,1 -> q2;
	
	
	
///////////////////////////////////////////////////////////////////////////////
// 1.13
// NFA recognizing { w | w doesnt contain a pair of 1's that are seperated by an odd number of symbols }
// 
// Summary: Contains 5 states, q0,q1,q2,q3,q4, with all but q4 being accept states. Accepts when w doesnt 
//          contain a pair of 1's that are seperated by an odd number of symbols 
//

states =          {q0,q1,q2,q3,q4}
input_alphabet =  {0,1}
start_state =     q0
accept_states =   {q0,q1,q2,q3}
delta =
    q0,0 -> q0;
    q0,1 -> q1;
    
    q1,0 -> q3;
    q1,1 -> q2;
    
    q2,0 -> q2;
    q2,1 -> q4;
    
    q3,0 -> q1;
    q3,1 -> q4;
    
    q4,0 -> q4;
    q4,1 -> q4;



///////////////////////////////////////////////////////////////////////////////
// 1.15a
// The states on N are the states of N_1
// 
// Summary: The states are the same with the addition of the new start state on N
//



///////////////////////////////////////////////////////////////////////////////
// 1.15b
// The start state of N is the same as the start state of N_1
// 
// Summary: The extra state that N has over N_1 is the new start state for N
//



///////////////////////////////////////////////////////////////////////////////
// 1.15c
// F = {q1} U F_1. The accept states of F are the old accept states plus its start state
// 
// Summary: The accept states are the same with the addition of the new start state
//
// 



///////////////////////////////////////////////////////////////////////////////
// 1.15d
// Define Î´ so that for any q âˆˆ Q and any a âˆˆ Î£  ,
// 
// Summary: (delta)(q,a) = (delta_1)(q,a)           q âˆˆ Q1 and q !âˆˆ F_1
//                          (delta1)(q,a)           q âˆˆ F1 and a != (epsilon)
//                          (delta1)(q,a) U {q1}    q âˆˆ F1 and a = (epsilon)
//                          {q1}                    q = q0 and a = (epsilon)
//                          0                       q = q0 and a != (epsilon)
//



///////////////////////////////////////////////////////////////////////////////
// 1.17a
// NFA recognizing the language (01 U 001 U 010)*
// 
// Summary: Contains 18 states, q0,q1, ... ,q17, with q0,q5,q11,q17 being accept
//          states. Accepts when the language contains (01 U 001 U 010)*
//

states =          {q0,q1,q2,q3,q4,q5,q6,q7,q8,q9,q10,q11,q12,q13,q14,q15,q16,q17}
input_alphabet =  {0,1}
start_state =     q0
accept_states =   {q0,q5,q11,q17}
delta =
    q0,   -> q1;
    q1,   -> {q2,q6,q12};
    
    // For String 01
    q2,0  -> q3;
    q3,   -> q4;
    q4,1  -> q5;
    q5,   -> q1;
    
    // For String 001
    q6,0  -> q7;
    q7,   -> q8;
    q8,0  -> q9;
    q9,   -> q10;
    q10,1 -> q11;
    q11,  -> q1;
    
    // For String 010
    q12,0 -> q13;
    q13,  -> q14;
    q14,1 -> q15;
    q15,  -> q16;
    q16,0 -> q17;
    q17,  -> q1;



///////////////////////////////////////////////////////////////////////////////
// 1.17b
// <problem-description>
// 
// Summary: Contains 7 states, q0,q1, ... ,q6, with q0,q4,q5 being accept states.
//          This machine is the DFA representation of 1.17a and accepts the same language.
//

states =          {q0,q1,q2,q3,q4,q5,q6}
input_alphabet =  {0,1}
start_state =     q0
accept_states =   {q0,q4,q5}
delta =
    q0,0 -> q1;
    q0,1 -> q3;
    
    q1,0 -> q2;
    q1,1 -> q4;
    
    q2,0 -> q3;
    q2,1 -> q0;
    
    q3,0 -> q3;
    q3,1 -> q3;
    
    q4,0 -> q5;
    q4,1 -> q3;
    
    q5,0 -> q6;
    q5,1 -> q4;
    
    q6,0 -> q2;
    q6,1 -> q4;
    
   
